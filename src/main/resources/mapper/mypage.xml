<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- DAO클래스를 alias설정해 뒀기에, music.dao.mypageDao라고 작성할 필요X -->
<mapper namespace="mypage">
	<!-- resultType 속성: 쿼리 결과를 매핑할 DTO 클래스의 경로 -->

	<!-- 지원현황 -->
	<!-- 구인게시판에 글/댓글 작성 전체 목록 출력
		 구인게시판(jobBoard :job)와 구인게시판댓글(jobReply: apps)을 Join, userId로 회원 조회 -->
	<select id="findAll" resultType="music.model.StatusInfoDto">
		SELECT apps.id id, apps.wanted_id wantedId,
		apps.resume_id resumeId,
		apps.state state,
		apps.created created, wan.position_code_id
		positionCodeId,
		wan.company_id companyId, com.company_name
		companyName,
		poco.name positionCodeName,
		res.user_id userId
		
		<!-- 지원(jobReply) 테이블 기준 -->
		FROM jobReply apps
		
		<!-- 테이블 Join -->
		INNER JOIN wanteds
		wan
		ON apps.wanted_id = wan.id
		INNER JOIN companys com
		ON wan.company_id = com.id
		INNER JOIN positions_code poco
		ON wan.position_code_id = poco.id
		INNER jobApp apps
		JOIN resumes res
		ON apps.resume_id = res.id
		
		<!-- 지원테이블 유저 id = 현재 조회를 시도하는 유저의 id -->
		WHERE apps.user_id = #{id}
		
		<!-- 만일, 검색창의 키워드 값이 존재한다면, 해당 값을 활용하여 조회 -->
		<if test="keyword != null">
			AND com.company_name LIKE CONCAT('%',#{keyword},'%')
		</if>
		<!-- 해당 글을 구인글에 최근에 작성한 댓글 순으로 정렬 -->
		ORDER BY apps.jobReDate DESC
	</select>














	<!-- member(userId) & prBoard(userId) => UserInfoVO클래스 객체 : id값이 같은 유저 정보 가져옴(From prBoard pr LEFT OUTER JOIN member us) -->
	<select id="findUser" resultType="userInfo">
		SELECT pr.prNo, pr.userId, pr.prSub, pr.prText, pr.prRcount,
		pr.prLoc, pr.prCareer, pr.prVideo,
		pr.prFile, pr.prHash, pr.prDelYn,
		us.userMajor, us.userPw, us.userName, us.userPhone,
		us.userEmail, us.userGru, us.userDelYn
		FROM prBoard pr
		LEFT OUTER JOIN member us
		ON pr.userId = us.userId
		WHERE us.userId = #{id}
		AND pr.prDelYn != 'Y' AND us.userDelYn != 'Y'
	</select>
	<!-- 삭제되지 않은 데이터만 가져옴 -->






</mapper>